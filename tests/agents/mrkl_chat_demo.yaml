interactions:
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\n"}], "model": "gpt-3.5-turbo", "max_tokens":
      null, "stream": false, "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1770'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SRT28TQQzF73wKy5deNlWi/Gm6F0SBSgWJAq1aJBa1zqyTGZi1lxmvQony3VE2
        aeGCOHB9nvfze54NhhpLdJ7MNW0cnEznby5/fnSfXt++9aerfM7vhd/RzSVLvsECdfGVnR0cx06b
        NrIFFSzQJSbjGsvRbD6aTE9OJ7MCG605Yomr1gbj4+nAurTQwXA8HGGBXaYVY7nBNmnT2p3pN5aM
        5Xg2LfA3+0kfjeYFmhrFJ2kyH28LdF6D44zl5w02nB+xSSNjiZRzyEZiu5AqxrIr8KHjvKOXcOvJ
        IGQwz7DsYgShhkGXvUDJQjZYe4XEjsXiAySOTJlrIAGKi64BRzFyDUfXnuHKNDVwxktN3CNeUmyO
        gKQG2isPEKSfnKueUYKajBaU+TlcLCFrAetdop6cDzlCyr37L8ZKrr12K28lXED22sUaurxff8WU
        nAdTjWAKyyD1vpnkNaed1BcPKRu0lOyx+ffDgfrk5lmeiIftr87+Bc3sVOqeelzJC9ffu5L7+/tK
        NpUAVEi9WGEJFe6TVlj8OboL0na2f3D7v79QYSXbQwDcFrgMErK/S0xZBUvMpi0WGKTmH1gOt1+2
        z34BAAD//wMA52FVdSIDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7b7a4b0399110813-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 14 Apr 2023 07:39:12 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '6155'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-reset-requests:
      - 17ms
      x-request-id:
      - eaeb991df467ffbca8aa728c8ab0f8af
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.28.2
    method: GET
    uri: https://serpapi.com/search?engine=google&gl=us&google_domain=google.com&hl=en&output=json&q=Who+recently+released+an+album+called+%27The+Storm+Before+the+Calm%27&source=python
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - MISS
      CF-Ray:
      - 7b7a4b304c2807d1-IAD
      Cache-Control:
      - max-age=3600, public
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Fri, 14 Apr 2023 07:39:14 GMT
      ETag:
      - W/"5b679ead803dff32cc79c0493dcf57c9"
      Server:
      - cloudflare
      Vary:
      - Accept-Encoding
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      referrer-policy:
      - strict-origin-when-cross-origin
      serpapi-search-id:
      - 64390321f55d77b027fe6c32
      x-content-type-options:
      - nosniff
      x-download-options:
      - noopen
      x-frame-options:
      - SAMEORIGIN
      x-permitted-cross-domain-policies:
      - none
      x-request-id:
      - 2fb19ffa-f351-4039-861b-b255cd4ab3a5
      x-robots-tag:
      - noindex, nofollow
      x-runtime:
      - '1.170343'
      x-xss-protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:"}], "model": "gpt-3.5-turbo", "max_tokens": null,
      "stream": false, "n": 1, "temperature": 0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2430'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA2SPzW4TUQyF9zyF5Q2bmyhDO21zNygFgYpEJTZUgosSZ8bpXDpjj8aeFIjy7iih
        fxI76/jzOcc7zDVGrBryquvbyXl58enm67Zuzv7YR9027+a0qN5syy/fiusZBtT1T6784WJaade3
        7FkFA1YDk3ONsTi7KE7L83l5GrDTmluMeNv75GRaTnwc1jqZncwKDDga3TLGHfaDdr0vXe9YDGNZ
        zAM+ez/p50VAV6f2mZzP9gGrRnPFhvH7Dju2R9dBW8aIZJbNSfzQUcVZDv2v9R68IYcruJPjzECD
        Z/PXBkIdB7iCigRG4+Pyg+olDfD+Ely1BVfYZKlBR4e8ORC/gQaGLEe6Jqc1GQNJDfeHHGrXY2eg
        RzYP9khnnyZZVIdHY5LVapVklwQgIR3FhBESPqUnDC+3yyz96P+YmxcxtbLBoiXJBp91yGbsztDQ
        9r+KbxMm2T9EJ8F9wE2WbM1yYDIVjGiuPQbMUvMvjLP9j/2rvwAAAP//AwB/WigSOQIAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7b7a4b3888b10813-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 14 Apr 2023 07:39:18 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '3782'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-reset-requests:
      - 17ms
      x-request-id:
      - 77249772a1f7089f612b085185e8f04f
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["Given an input question, first create a syntactically correct
      sqlite query to run, then look at the results of the query and return the answer.
      Unless the user specifies in his question a specific number of examples he wishes
      to obtain, always limit your query to at most 5 results. You can order the results
      by a relevant column to return the most interesting examples in the database.\n\nNever
      query for all the columns from a specific table, only ask for a the few relevant
      columns given the question.\n\nPay attention to use only the column names that
      you can see in the schema description. Be careful to not query for columns that
      do not exist. Also, pay attention to which column is in which table.\n\nUse
      the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query
      to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly
      use the tables listed below.\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3
      rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3
      rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion: What albums does Alanis Morissette
      have in the database? \nSQLQuery:"], "model": "text-davinci-003", "temperature":
      0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty":
      0, "n": 1, "best_of": 1, "logit_bias": {}, "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6438'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0yQzU7CQBRG9z7F5G7YDIYCbWEMC4JVS6BNkMQEY0h/LjA4nZl0LkgkvLtRUFx+
        55zVdwRZgoCisqoZ+r1xrvbBIj144XYcdLaPH/b+czXqeqMFcDD5FgsCAYQHWhamsgpJGg0cihoz
        whKEF/S8rh/2/T6HypSoLnmzzPZSF7LZanW++42RBToQr8cfDQLYczSJRnM2l6SQPczSKRuqfFex
        OEmiGRunccKGNUlHLE3O6va845INLupKXp6iWfRLk6xCNmCNocq0dGxqaukcEmGDTeJpPGf+HXCQ
        usQDiBYHZda2NrkDoXdKcVhJLd1mWWPmjAYBjoyF0xuHncvWCOIItjaVpSWZd9QORNtrhxyuF/2J
        js+BDGXqXxq0T6ebLwAAAP//AwDXVzaFiQEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7b7a4b51a87f0813-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 14 Apr 2023 07:39:20 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - text-davinci-003
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '2167'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '250000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '249488'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 122ms
      x-request-id:
      - ea8f2cdc9191a5e01b3477c208be453a
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["Given an input question, first create a syntactically correct
      sqlite query to run, then look at the results of the query and return the answer.
      Unless the user specifies in his question a specific number of examples he wishes
      to obtain, always limit your query to at most 5 results. You can order the results
      by a relevant column to return the most interesting examples in the database.\n\nNever
      query for all the columns from a specific table, only ask for a the few relevant
      columns given the question.\n\nPay attention to use only the column names that
      you can see in the schema description. Be careful to not query for columns that
      do not exist. Also, pay attention to which column is in which table.\n\nUse
      the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query
      to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly
      use the tables listed below.\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n\n/*\n3
      rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n\n/*\n3
      rows from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n\n/*\n3 rows from PlaylistTrack
      table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion: What albums does Alanis Morissette
      have in the database? \nSQLQuery: SELECT Title FROM Album INNER JOIN Artist
      ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = ''Alanis Morissette''
      LIMIT 5;\nSQLResult: [(''Jagged Little Pill'',)]\nAnswer:"], "model": "text-davinci-003",
      "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty": 0, "presence_penalty":
      0, "n": 1, "best_of": 1, "logit_bias": {}, "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6612'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0zPQUvDMBiH8bufIvwvu2TSqlu33AZeHE5UUIYiI01e27g0Cc3bMRn77uIQ9fz8
        Ls8BzkLBdMmPq8lsadcPxe4mPT0+v3zm1XowdytXXy+2JSRi/UGGocC0542JXfLELgZImJ40k4Uq
        p7PyalLNp6VEFy35Hz62eueCceOiuPz2bXSGMtTr4ZShIBZeB5fFKvYuZ2Im0eosuCWhfT10YrTU
        TUNW3DpmT+LeeT8SLpyE1axrnekcEi5Y2kMVEj42qY91hgqD9xLvLrjcbnrSOQYoZI4JxzeJIeuG
        oA5IfewSbzhuKWSoi7KqJP5Of0M5k+DI2v+j88nxePYFAAD//wMAQNIpslABAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7b7a4b60c9650813-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 14 Apr 2023 07:39:22 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - text-davinci-003
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '1241'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3000'
      x-ratelimit-limit-tokens:
      - '250000'
      x-ratelimit-remaining-requests:
      - '2999'
      x-ratelimit-remaining-tokens:
      - '249487'
      x-ratelimit-reset-requests:
      - 20ms
      x-ratelimit-reset-tokens:
      - 122ms
      x-request-id:
      - 9e4dcdb87f68447e571e36f83f437130
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:Now that I know the artist''s name, I can use the
      FooBar DB tool to find out if they are in the database and what albums of theirs
      are in it.\nAction:\n```\n{\n  \"action\": \"FooBar DB\",\n  \"action_input\":
      \"What albums does Alanis Morissette have in the database?\"\n}\n```\n\n\nObservation:  Alanis
      Morissette has the album ''Jagged Little Pill'' in the database.\nThought:"}],
      "model": "gpt-3.5-turbo", "max_tokens": null, "stream": false, "n": 1, "temperature":
      0.0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2806'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.4
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOQW/TQBCF7/yK0VxycaykiZPgW4OoRAWoqAWpAlSNvRN7Yb3j7oxJUZT/jmwK
        vc573zfvhN5hiXVLVnd9mG+L3TV/Wd/uborjvntyzebz3ccLva8f3y4+YYZS/eDanom8lq4PbF4i
        ZlgnJmOH5XKzW66L7evNRYadOA5YYtPbfJUXcxtSJfPFarHEDAelhrE8YZ+k6+3B5CdHxXKzXGf4
        4v5/L1YZmhiFl+Zme86wbsXXrFh+PWHH+s+aJDCWSKpejaKNGyUax3H/O2jpF8NBhujAWgaKeuQE
        JlCJtdBTMgU5TNnjwDouyb/FKx8pwOVULuFuBJN5NTi2AolrjhZ+Q+LApOyAIlCohg5qCoEdzEbi
        1iR1sOeDJJ78byh0M/AKl4GiV/ggyauyGed/X0yK2TU1DTt4780Cw40PYYJ8nCRXIntK4MioIuUc
        zxkefPTaPiQmlYglqkmPGfro+AnLxfn7+dUfAAAA//8DAKoBNGsCAgAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7b7a4b6a4ef50813-IAD
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Fri, 14 Apr 2023 07:39:26 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-ns36y3iizxjt9cbrrl4tneqp
      openai-processing-ms:
      - '3412'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-reset-requests:
      - 17ms
      x-request-id:
      - d7322b766cd8f7b66b853e0d4253f555
    status:
      code: 200
      message: OK
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - 0.0.0.0:8935
      user-agent:
      - python-httpx/0.24.0
    method: GET
    uri: http://0.0.0.0:8935/ping
  response:
    content: ought-ice says pong
    headers:
      cache-control:
      - no-transform
      content-length:
      - '19'
      content-type:
      - text/plain; charset=utf-8
      date:
      - Fri, 14 Apr 2023 07:41:10 GMT
      server:
      - uvicorn
    http_version: HTTP/1.1
    status_code: 200
version: 1
