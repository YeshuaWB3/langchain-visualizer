interactions:
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - 0.0.0.0:8935
      user-agent:
      - python-httpx/0.23.3
    method: GET
    uri: http://0.0.0.0:8935/ping
  response:
    content: ought-ice says pong
    headers:
      cache-control:
      - no-transform
      content-length:
      - '19'
      content-type:
      - text/plain; charset=utf-8
      date:
      - Wed, 22 Mar 2023 23:37:18 GMT
      server:
      - uvicorn
    http_version: HTTP/1.1
    status_code: 200
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\n"}], "model": "gpt-3.5-turbo", "max_tokens":
      null, "stream": false, "n": 1, "temperature": 0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '1768'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.2
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: '{"id":"chatcmpl-6x2IyUsD4bZGG6JifbHkiu05Wgnhj","object":"chat.completion","created":1679528232,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":364,"completion_tokens":119,"total_tokens":483},"choices":[{"message":{"role":"assistant","content":"Question:
        What is the full name of the artist who recently released an album called
        ''The Storm Before the Calm'' and are they in the FooBar database? If so,
        what albums of theirs are in the FooBar database?\nThought: I should use the
        Search tool to find the answer to the first part of the question and then
        use the FooBar DB tool to find the answer to the second part.\nAction:\n```\n{\n  \"action\":
        \"Search\",\n  \"action_input\": \"Who recently released an album called ''The
        Storm Before the Calm''\"\n}\n```\n"},"finish_reason":"stop","index":0}]}

        '
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Length:
      - '802'
      Content-Type:
      - application/json
      Date:
      - Wed, 22 Mar 2023 23:37:17 GMT
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization: user-dummy
      Openai-Processing-Ms:
      - '5182'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 7782c1ca08a9467ad6223ed1434c6fed
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - python-requests/2.28.2
    method: GET
    uri: https://serpapi.com/search?engine=google&gl=us&google_domain=google.com&hl=en&output=json&q=Who+recently+released+an+album+called+%27The+Storm+Before+the+Calm%27&source=python
  response:
    body:
      string: !!binary |
        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
    headers:
      CF-Cache-Status:
      - MISS
      CF-Ray:
      - 7ac2431f8def42fe-EWR
      Cache-Control:
      - max-age=3600, public
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Wed, 22 Mar 2023 23:37:24 GMT
      ETag:
      - W/"f00690642ae64244be7465f7accf7eff"
      Server:
      - cloudflare
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      referrer-policy:
      - strict-origin-when-cross-origin
      serpapi-search-id:
      - 641b9133f2180158859a864a
      x-content-type-options:
      - nosniff
      x-download-options:
      - noopen
      x-frame-options:
      - SAMEORIGIN
      x-permitted-cross-domain-policies:
      - none
      x-request-id:
      - 7067e900-130d-4dbb-b32b-2d6c32eb63a4
      x-robots-tag:
      - noindex, nofollow
      x-runtime:
      - '1.458195'
      x-xss-protection:
      - 1; mode=block
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:"}], "model": "gpt-3.5-turbo", "max_tokens": null,
      "stream": false, "n": 1, "temperature": 0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2428'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.2
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: '{"id":"chatcmpl-6x2JBj0Pu7gNBzwOUltE9uM4AX2h9","object":"chat.completion","created":1679528245,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":518,"completion_tokens":72,"total_tokens":590},"choices":[{"message":{"role":"assistant","content":"Now
        that I know the artist''s name, I can use the FooBar DB tool to find out if
        they are in the database and what albums of theirs are in it.\nAction:\n```\n{\n  \"action\":
        \"FooBar DB\",\n  \"action_input\": \"What albums does Alanis Morissette have
        in the database?\"\n}\n```\n\n"},"finish_reason":"stop","index":0}]}

        '
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Length:
      - '569'
      Content-Type:
      - application/json
      Date:
      - Wed, 22 Mar 2023 23:37:28 GMT
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization: user-dummy
      Openai-Processing-Ms:
      - '2966'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 59b67214ab4da6989ad6715f07d24512
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["Given an input question, first create a syntactically correct
      sqlite query to run, then look at the results of the query and return the answer.
      Unless the user specifies in his question a specific number of examples he wishes
      to obtain, always limit your query to at most 5 results. You can order the results
      by a relevant column to return the most interesting examples in the database.\n\nNever
      query for all the columns from a specific table, only ask for a the few relevant
      columns given the question.\n\nPay attention to use only the column names that
      you can see in the schema description. Be careful to not query for columns that
      do not exist. Also, pay attention to which column is in which table.\n\nUse
      the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query
      to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly
      use the tables listed below.\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n/*\n3
      rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n/*\n3 rows
      from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n/*\n3 rows from PlaylistTrack table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion:
      What albums does Alanis Morissette have in the database? \nSQLQuery:"], "model":
      "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p": 1, "frequency_penalty":
      0, "presence_penalty": 0, "n": 1, "best_of": 1, "logit_bias": {}, "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6416'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.2
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: '{"id":"cmpl-6x2JE41wBAjsDKMqi8dCFcxlzDEJZ","object":"text_completion","created":1679528248,"model":"text-davinci-003","choices":[{"text":"
        SELECT Title FROM Album WHERE ArtistId IN (SELECT ArtistId FROM Artist WHERE
        Name = ''Alanis Morissette'') LIMIT 5;","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":2116,"completion_tokens":28,"total_tokens":2144}}

        '
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Length:
      - '380'
      Content-Type:
      - application/json
      Date:
      - Wed, 22 Mar 2023 23:37:29 GMT
      Openai-Model:
      - text-davinci-003
      Openai-Organization: user-dummy
      Openai-Processing-Ms:
      - '1159'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Limit-Tokens:
      - '250000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Remaining-Tokens:
      - '249487'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Ratelimit-Reset-Tokens:
      - 122ms
      X-Request-Id:
      - ed7a0fedff7d0a5854aadf414c39f0f8
    status:
      code: 200
      message: OK
- request:
    body: '{"prompt": ["Given an input question, first create a syntactically correct
      sqlite query to run, then look at the results of the query and return the answer.
      Unless the user specifies in his question a specific number of examples he wishes
      to obtain, always limit your query to at most 5 results. You can order the results
      by a relevant column to return the most interesting examples in the database.\n\nNever
      query for all the columns from a specific table, only ask for a the few relevant
      columns given the question.\n\nPay attention to use only the column names that
      you can see in the schema description. Be careful to not query for columns that
      do not exist. Also, pay attention to which column is in which table.\n\nUse
      the following format:\n\nQuestion: \"Question here\"\nSQLQuery: \"SQL Query
      to run\"\nSQLResult: \"Result of the SQLQuery\"\nAnswer: \"Final answer here\"\n\nOnly
      use the tables listed below.\n\n\nCREATE TABLE \"Artist\" (\n\t\"ArtistId\"
      INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120), \n\tPRIMARY KEY (\"ArtistId\")\n)\n/*\n3
      rows from Artist table:\nArtistId\tName\n1\tAC/DC\n2\tAccept\n3\tAerosmith\n*/\n\n\nCREATE
      TABLE \"Employee\" (\n\t\"EmployeeId\" INTEGER NOT NULL, \n\t\"LastName\" NVARCHAR(20)
      NOT NULL, \n\t\"FirstName\" NVARCHAR(20) NOT NULL, \n\t\"Title\" NVARCHAR(30),
      \n\t\"ReportsTo\" INTEGER, \n\t\"BirthDate\" DATETIME, \n\t\"HireDate\" DATETIME,
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60), \n\tPRIMARY
      KEY (\"EmployeeId\"), \n\tFOREIGN KEY(\"ReportsTo\") REFERENCES \"Employee\"
      (\"EmployeeId\")\n)\n/*\n3 rows from Employee table:\nEmployeeId\tLastName\tFirstName\tTitle\tReportsTo\tBirthDate\tHireDate\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\n\n*/\n\n\nCREATE
      TABLE \"Genre\" (\n\t\"GenreId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"GenreId\")\n)\n/*\n3 rows from Genre table:\nGenreId\tName\n1\tRock\n2\tJazz\n3\tMetal\n*/\n\n\nCREATE
      TABLE \"MediaType\" (\n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"MediaTypeId\")\n)\n/*\n3 rows from MediaType table:\nMediaTypeId\tName\n1\tMPEG
      audio file\n2\tProtected AAC audio file\n3\tProtected MPEG-4 video file\n*/\n\n\nCREATE
      TABLE \"Playlist\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(120),
      \n\tPRIMARY KEY (\"PlaylistId\")\n)\n/*\n3 rows from Playlist table:\nPlaylistId\tName\n\n*/\n\n\nCREATE
      TABLE \"Album\" (\n\t\"AlbumId\" INTEGER NOT NULL, \n\t\"Title\" NVARCHAR(160)
      NOT NULL, \n\t\"ArtistId\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"AlbumId\"),
      \n\tFOREIGN KEY(\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\")\n)\n/*\n3
      rows from Album table:\nAlbumId\tTitle\tArtistId\n1\tFor Those About To Rock
      We Salute You\t1\n2\tBalls to the Wall\t2\n3\tRestless and Wild\t2\n*/\n\n\nCREATE
      TABLE \"Customer\" (\n\t\"CustomerId\" INTEGER NOT NULL, \n\t\"FirstName\" NVARCHAR(40)
      NOT NULL, \n\t\"LastName\" NVARCHAR(20) NOT NULL, \n\t\"Company\" NVARCHAR(80),
      \n\t\"Address\" NVARCHAR(70), \n\t\"City\" NVARCHAR(40), \n\t\"State\" NVARCHAR(40),
      \n\t\"Country\" NVARCHAR(40), \n\t\"PostalCode\" NVARCHAR(10), \n\t\"Phone\"
      NVARCHAR(24), \n\t\"Fax\" NVARCHAR(24), \n\t\"Email\" NVARCHAR(60) NOT NULL,
      \n\t\"SupportRepId\" INTEGER, \n\tPRIMARY KEY (\"CustomerId\"), \n\tFOREIGN
      KEY(\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\")\n)\n/*\n3 rows
      from Customer table:\nCustomerId\tFirstName\tLastName\tCompany\tAddress\tCity\tState\tCountry\tPostalCode\tPhone\tFax\tEmail\tSupportRepId\n\n*/\n\n\nCREATE
      TABLE \"Invoice\" (\n\t\"InvoiceId\" INTEGER NOT NULL, \n\t\"CustomerId\" INTEGER
      NOT NULL, \n\t\"InvoiceDate\" DATETIME NOT NULL, \n\t\"BillingAddress\" NVARCHAR(70),
      \n\t\"BillingCity\" NVARCHAR(40), \n\t\"BillingState\" NVARCHAR(40), \n\t\"BillingCountry\"
      NVARCHAR(40), \n\t\"BillingPostalCode\" NVARCHAR(10), \n\t\"Total\" NUMERIC(10,
      2) NOT NULL, \n\tPRIMARY KEY (\"InvoiceId\"), \n\tFOREIGN KEY(\"CustomerId\")
      REFERENCES \"Customer\" (\"CustomerId\")\n)\n/*\n3 rows from Invoice table:\nInvoiceId\tCustomerId\tInvoiceDate\tBillingAddress\tBillingCity\tBillingState\tBillingCountry\tBillingPostalCode\tTotal\n\n*/\n\n\nCREATE
      TABLE \"Track\" (\n\t\"TrackId\" INTEGER NOT NULL, \n\t\"Name\" NVARCHAR(200)
      NOT NULL, \n\t\"AlbumId\" INTEGER, \n\t\"MediaTypeId\" INTEGER NOT NULL, \n\t\"GenreId\"
      INTEGER, \n\t\"Composer\" NVARCHAR(220), \n\t\"Milliseconds\" INTEGER NOT NULL,
      \n\t\"Bytes\" INTEGER, \n\t\"UnitPrice\" NUMERIC(10, 2) NOT NULL, \n\tPRIMARY
      KEY (\"TrackId\"), \n\tFOREIGN KEY(\"MediaTypeId\") REFERENCES \"MediaType\"
      (\"MediaTypeId\"), \n\tFOREIGN KEY(\"GenreId\") REFERENCES \"Genre\" (\"GenreId\"),
      \n\tFOREIGN KEY(\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\")\n)\n/*\n3 rows
      from Track table:\nTrackId\tName\tAlbumId\tMediaTypeId\tGenreId\tComposer\tMilliseconds\tBytes\tUnitPrice\n1\tFor
      Those About To Rock (We Salute You)\t1\t1\t1\tAngus Young, Malcolm Young, Brian
      Johnson\t343719\t11170334\t0.99\n2\tBalls to the Wall\t2\t2\t1\tNone\t342562\t5510424\t0.99\n3\tFast
      As a Shark\t3\t2\t1\tF. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman\t230619\t3990994\t0.99\n*/\n\n\nCREATE
      TABLE \"InvoiceLine\" (\n\t\"InvoiceLineId\" INTEGER NOT NULL, \n\t\"InvoiceId\"
      INTEGER NOT NULL, \n\t\"TrackId\" INTEGER NOT NULL, \n\t\"UnitPrice\" NUMERIC(10,
      2) NOT NULL, \n\t\"Quantity\" INTEGER NOT NULL, \n\tPRIMARY KEY (\"InvoiceLineId\"),
      \n\tFOREIGN KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN
      KEY(\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\")\n)\n/*\n3 rows from
      InvoiceLine table:\nInvoiceLineId\tInvoiceId\tTrackId\tUnitPrice\tQuantity\n\n*/\n\n\nCREATE
      TABLE \"PlaylistTrack\" (\n\t\"PlaylistId\" INTEGER NOT NULL, \n\t\"TrackId\"
      INTEGER NOT NULL, \n\tPRIMARY KEY (\"PlaylistId\", \"TrackId\"), \n\tFOREIGN
      KEY(\"TrackId\") REFERENCES \"Track\" (\"TrackId\"), \n\tFOREIGN KEY(\"PlaylistId\")
      REFERENCES \"Playlist\" (\"PlaylistId\")\n)\n/*\n3 rows from PlaylistTrack table:\nPlaylistId\tTrackId\n\n*/\n\nQuestion:
      What albums does Alanis Morissette have in the database? \nSQLQuery: SELECT
      Title FROM Album WHERE ArtistId IN (SELECT ArtistId FROM Artist WHERE Name =
      ''Alanis Morissette'') LIMIT 5;\nSQLResult: [(''Jagged Little Pill'',)]\nAnswer:"],
      "model": "text-davinci-003", "temperature": 0.0, "max_tokens": 256, "top_p":
      1, "frequency_penalty": 0, "presence_penalty": 0, "n": 1, "best_of": 1, "logit_bias":
      {}, "stop": ["\nSQLResult:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6577'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.2
    method: POST
    uri: https://api.openai.com/v1/completions
  response:
    body:
      string: '{"id":"cmpl-6x2JHwvmez5sD3fIby7F8ONJ0Ll6J","object":"text_completion","created":1679528251,"model":"text-davinci-003","choices":[{"text":"
        Alanis Morissette has the album ''Jagged Little Pill'' in the database.","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":2159,"completion_tokens":18,"total_tokens":2177}}

        '
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Length:
      - '336'
      Content-Type:
      - application/json
      Date:
      - Wed, 22 Mar 2023 23:37:32 GMT
      Openai-Model:
      - text-davinci-003
      Openai-Organization: user-dummy
      Openai-Processing-Ms:
      - '1371'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3000'
      X-Ratelimit-Limit-Tokens:
      - '250000'
      X-Ratelimit-Remaining-Requests:
      - '2999'
      X-Ratelimit-Remaining-Tokens:
      - '249488'
      X-Ratelimit-Reset-Requests:
      - 20ms
      X-Ratelimit-Reset-Tokens:
      - 122ms
      X-Request-Id:
      - 298552973e4fcbefdcf79b777d8691db
    status:
      code: 200
      message: OK
- request:
    body: '{"messages": [{"role": "system", "content": "Answer the following questions
      as best you can. You have access to the following tools:\n\nSearch: useful for
      when you need to answer questions about current events. You should ask targeted
      questions\nCalculator: useful for when you need to answer questions about math\nFooBar
      DB: useful for when you need to answer questions about FooBar. Input should
      be in the form of a question containing full context\n\nThe way you use the
      tools is by specifying a json blob.\nSpecifically, this json should have a `action`
      key (with the name of the tool to use) and a `action_input` key (with the input
      to the tool going here).\n\nThe only values that should be in the \"action\"
      field are: Search, Calculator, FooBar DB\n\nThe $JSON_BLOB should only contain
      a SINGLE action, do NOT return a list of multiple actions. Here is an example
      of a valid $JSON_BLOB:\n\n```\n{\n  \"action\": $TOOL_NAME,\n  \"action_input\":
      $INPUT\n}\n```\n\nALWAYS use the following format:\n\nQuestion: the input question
      you must answer\nThought: you should always think about what to do\nAction:\n```\n$JSON_BLOB\n```\nObservation:
      the result of the action\n... (this Thought/Action/Observation can repeat N
      times)\nThought: I now know the final answer\nFinal Answer: the final answer
      to the original input question\n\nBegin! Reminder to always use the exact characters
      `Final Answer` when responding."}, {"role": "user", "content": "What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\n\nThis was your previous work (but I haven''t seen
      any of it! I only see what you return as final answer):\nQuestion: What is the
      full name of the artist who recently released an album called ''The Storm Before
      the Calm'' and are they in the FooBar database? If so, what albums of theirs
      are in the FooBar database?\nThought: I should use the Search tool to find the
      answer to the first part of the question and then use the FooBar DB tool to
      find the answer to the second part.\nAction:\n```\n{\n  \"action\": \"Search\",\n  \"action_input\":
      \"Who recently released an album called ''The Storm Before the Calm''\"\n}\n```\n\nObservation:
      Alanis Morissette\nThought:Now that I know the artist''s name, I can use the
      FooBar DB tool to find out if they are in the database and what albums of theirs
      are in it.\nAction:\n```\n{\n  \"action\": \"FooBar DB\",\n  \"action_input\":
      \"What albums does Alanis Morissette have in the database?\"\n}\n```\n\n\nObservation:  Alanis
      Morissette has the album ''Jagged Little Pill'' in the database.\nThought:"}],
      "model": "gpt-3.5-turbo", "max_tokens": null, "stream": false, "n": 1, "temperature":
      0, "stop": ["Observation:"]}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '2804'
      Content-Type:
      - application/json
      User-Agent:
      - OpenAI/v1 PythonBindings/0.27.2
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: '{"id":"chatcmpl-6x2JJWTTEXIllLHn3g1eVkzD6Aetx","object":"chat.completion","created":1679528253,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":613,"completion_tokens":54,"total_tokens":667},"choices":[{"message":{"role":"assistant","content":"I
        have found the answer to both parts of the question.\nFinal Answer: The artist
        who recently released an album called ''The Storm Before the Calm'' is Alanis
        Morissette. The album ''Jagged Little Pill'' is in the FooBar database."},"finish_reason":"stop","index":0}]}

        '
    headers:
      Access-Control-Allow-Origin:
      - '*'
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Length:
      - '514'
      Content-Type:
      - application/json
      Date:
      - Wed, 22 Mar 2023 23:37:35 GMT
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization: user-dummy
      Openai-Processing-Ms:
      - '2506'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 114a363542ddf8a8717dbe320356e94d
    status:
      code: 200
      message: OK
version: 1
